#version 450

#define THREAD_GROUP_SIZE 64
#define USE_SHARED_VERTICES 1

//#extension GL_KHR_shader_subgroup_arithmetic: enable
#define USE_PROJECTION 0

layout (binding = 0) uniform frame_data
{
    vec2 windowSize;
    vec2 padding;

};

layout (binding = 1, row_major) uniform FrameDataBlock
{
    mat4 cameraMatrix;
    mat4 viewProjMat;
    mat4 mvp;
    mat4 matrix_padding;
};



struct VData
{
    vec3 pos;
    uint col;
};

layout (std430, binding=2) restrict readonly buffer vertex_data
{
    VData vertexValues[];
};



layout (std430, binding=3) restrict readonly buffer index_data
{
    uint indices[];
};

layout (std430, binding = 4, row_major) restrict readonly buffer instance_data
{
    mat4 instanceMatrix[];
};

const uint pixelsPerThreadX = 16;
const uint pixelsPerThreadY = 1;
const uint pixelsPerThread = pixelsPerThreadX * pixelsPerThreadY;
const uint x_threads = 4 * 1;
const uint y_threads = 64 * 1;
const uint threads = x_threads * y_threads;

shared uint visibleTriangles;
shared uint maxDepthShared;
layout(local_size_x = x_threads, local_size_y = y_threads , local_size_z = 1) in;
layout(rgba8, binding = 0) uniform image2D outputImage;


#if USE_SHARED_VERTICES
    shared VData triangles[threads * 3];
    //shared float d0[threads];
    //shared float d1[threads];
    //shared float d2[threads];
#else
    shared uint triangleIndexes[threads * 2];
#endif
shared uint maxDepths[threads / THREAD_GROUP_SIZE];

void getUVD(vec3 v1, vec3 v2, vec3 v3, vec2 topLeft, vec2 screen, inout vec3 uChange, inout vec3 vChange, inout vec3 dChange, inout float det)
{
    // flip e1 and e2 for CW
    vec3 e1 = (v2 - v1).xyz;
    vec3 e2 = (v3 - v1).xyz;

    // breaks if e2.x == 0.0f
    if(e1.x == 0.0f) e1.x += 1.0e-30f;
    if(e1.y == 0.0f) e1.y += 1.0e-30f;
    if(e1.z == 0.0f) e1.z += 1.0e-30f;
    if(e2.x == 0.0f) e2.x += 1.0e-30f;
    if(e2.y == 0.0f) e2.y += 1.0e-30f;
    if(e2.z == 0.0f) e2.z += 1.0e-30f;

    vec2 pvec = vec2(e2.y, -e2.x); //cross(rDir, e2);
    det = dot(e1.xy, pvec.xy);


    vec3 tvecStart = vec3(topLeft, 0.0f) - v1.xyz;

    //vec3 tvecXOffset = 2.0f / screen.x; // vec3(vec2(2.0f, 0.0f) / screen, 0.0f);
    //vec3 tvecYOffset = 2.0f / screen.y; // vec3(vec2(0.0f, 2.0f) / screen, 0.0f);
    float tvecXOffset = 2.0f / screen.x; // vec3(vec2(2.0f, 0.0f) / screen, 0.0f);
    float tvecYOffset = 2.0f / screen.y; // vec3(vec2(0.0f, 2.0f) / screen, 0.0f);

    vec3 qvecStart   = cross(tvecStart,   e1);
    vec3 qvecXOffset = vec3(0.0f, -tvecXOffset * e1.z, tvecXOffset * e1.y); //cross(tvecXOffset, e1);
    vec3 qvecYOffset = vec3(tvecYOffset * e1.z, 0.0f, -tvecYOffset * e1.x); //cross(tvecYOffset, e1);

    float invDet = 1.0f / det;

    uChange = vec3(dot(tvecStart.xy, pvec), tvecXOffset * pvec.x, tvecYOffset * pvec.y) * invDet;
    vChange = vec3(qvecStart.z, qvecXOffset.z, qvecYOffset.z) * (-invDet); // dot rdir
    dChange = vec3(dot(qvecStart, e2), dot(qvecXOffset.yz, e2.yz), dot(qvecYOffset.xz, e2.xz)) * (-invDet);

}

void main()
{
    vec2 pixelCoords = vec2(gl_GlobalInvocationID.xy) * vec2(pixelsPerThreadX, pixelsPerThreadY);
    vec2 screen = vec2(windowSize);
    uint threadId = gl_LocalInvocationID.x + gl_LocalInvocationID.y * x_threads;

    uvec2 startIndex = uvec2((threadId % x_threads) * pixelsPerThreadX, (threadId / x_threads) * pixelsPerThreadY);


    vec2 tileSize = vec2(x_threads, y_threads) * vec2(pixelsPerThreadX, pixelsPerThreadY);

    vec2 topLeft = (vec2(gl_WorkGroupID.xy) * tileSize) + vec2(0.5f);
    vec2 bottomRight = topLeft + tileSize;
    topLeft = (topLeft / screen) * 2.0f - 1.0f;
    bottomRight = (bottomRight / screen) * 2.0f - 1.0f;
    vec2 tileSizeScreen = (tileSize / screen) * 2.0f;

    //float localMin = 2.0f;
    //float localMins[pixelsPerThread];
    vec4 localMins1 = vec4(0.0);
    vec4 localMins2 = vec4(0.0);
    vec4 localMins3 = vec4(0.0);
    vec4 localMins4 = vec4(0.0);

   //uint closestTriangleIndexes[pixelsPerThread]; // = uvec4(0u);

   uvec4 closestTriangleIndexes1 = uvec4(0u);
   uvec4 closestTriangleIndexes2 = uvec4(0u);
   uvec4 closestTriangleIndexes3 = uvec4(0u);
   uvec4 closestTriangleIndexes4 = uvec4(0u);

    //uint closestTriangleIndex = 0u;
    //uint closestTriangleIndexes[pixelsPerThread]; // = uvec4(0u);

//    for(uint i = 0; i < pixelsPerThread; ++i)
//    {
//        closestTriangleIndexes[i] = 0;
//        uint x = i % pixelsPerThreadX;
//        uint y = i / pixelsPerThreadX;
//        localMins[i] = 0.0f;
//    }

    //vec3 rDir = vec3(0.0f, 0.0f, -1.0f);

    uint blockId = threadId / THREAD_GROUP_SIZE;
    //uint maxTriangle = 24; // 1048576 / (64); // 15 * 64;
    uint maxTriangle = 1048576 / (64); // 15 * 64;
    for(uint triangleIndex = 0; triangleIndex < maxTriangle; triangleIndex += threads)
    {
        vec4 lt = min(min(localMins1, localMins2), min(localMins3, localMins4));
        float localMin = min(min(lt.x, lt.y), min(lt.z, lt.w));//localMins[0];
//        for(uint i = 1; i < pixelsPerThread; ++i)
//            localMin = min(localMin, localMins[i]);

        if(threadId == 0)
        {
            maxDepthShared = floatBitsToUint(localMin);
            visibleTriangles = 0;
        }
        if(threadId % THREAD_GROUP_SIZE == 0)
        {
            maxDepths[blockId] = floatBitsToUint(localMin);
        }

        groupMemoryBarrier();
        memoryBarrierShared();
        barrier();

        atomicMin(maxDepthShared, floatBitsToUint(localMin));
        atomicMin(maxDepths[blockId], floatBitsToUint(localMin));
        groupMemoryBarrier();
        memoryBarrierShared();
        barrier();

        float maxDepth = uintBitsToFloat(maxDepthShared);
        //float maxDepth = subgroupMax(localMin);
        if(triangleIndex + threadId < maxTriangle)
        {
            uint currTriangleIndex = (triangleIndex + threadId) * 3 + 0;
            #if USE_PROJECTION
                uint vertexAdding = 2u;
                uint triangleIndex1 = indices[(currTriangleIndex + 0)];
                uint triangleIndex2 = indices[(currTriangleIndex + 1)];
                uint triangleIndex3 = indices[(currTriangleIndex + 2)];
                VData localTriangle1 = vertexValues[triangleIndex1 * vertexAdding];
                VData localTriangle2 = vertexValues[triangleIndex2 * vertexAdding];
                VData localTriangle3 = vertexValues[triangleIndex3 * vertexAdding];
                vec4 pos0 =  mvp * (matrix_padding * vec4(localTriangle1.pos, 1.0f));
                vec4 pos1 =  mvp * (matrix_padding * vec4(localTriangle2.pos, 1.0f));
                vec4 pos2 =  mvp * (matrix_padding * vec4(localTriangle3.pos, 1.0f));

                pos0.w = 1.0f / pos0.w;
                pos1.w = 1.0f / pos1.w;
                pos2.w = 1.0f / pos2.w;

                pos0.xyz *= pos0.w;
                pos1.xyz *= pos1.w;
                pos2.xyz *= pos2.w;

                vec3 v1 = pos0.xyz;
                vec3 v2 = pos1.xyz;
                vec3 v3 = pos2.xyz;
            #else
                VData localTriangle1 = vertexValues[currTriangleIndex + 0];
                VData localTriangle2 = vertexValues[currTriangleIndex + 1];
                VData localTriangle3 = vertexValues[currTriangleIndex + 2];

                vec3 v1 = localTriangle1.pos;
                vec3 v2 = localTriangle2.pos;
                vec3 v3 = localTriangle3.pos;
            #endif

            float minZ = min(min(v1.z, v2.z), v3.z);
            float maxZ = max(max(v1.z, v2.z), v3.z);
            //vec3 maxPos = max(max(localTriangle1.pos, localTriangle2.pos), localTriangle3.pos);

            vec2 minPos = min(v1, min(v2, v3)).xy - topLeft;
            vec2 maxPos = max(v1, max(v2, v3)).xy - topLeft;

            //if(!(any(greaterThan(minPos, vec3(topLeft + tileSize, maxDepth))) || any(lessThan(maxPos, vec3(topLeft, 0.0f)))))
            //if(!(any(equal(minPos, maxPos)) || any(bvec4(greaterThan(minPos, tileSizeScreen), lessThan(maxPos, vec2(0.0f))))))
            if(!( any(greaterThan(minPos, tileSizeScreen)) || any(lessThan(maxPos, vec2(0.0f)))) &&
                minZ <= 1.0f && maxZ > maxDepth)
            {
                minPos.xy = max(minPos.xy, vec2(0.0f)) * 0.25f * screen;
                maxPos.xy = min(maxPos.xy, tileSizeScreen) * 0.25f * screen;

                vec3 uChange = vec3(0);
                vec3 vChange = vec3(0);
                vec3 dChange = vec3(0);
                float det = 0.0f;
                getUVD(v1, v2, v3, topLeft, screen, uChange, vChange, dChange, det);

                vec4 u = vec4(0.0f, uChange.y * tileSize.x, uChange.z * tileSize.y, uChange.y * tileSize.x + uChange.z * tileSize.y) + uChange.x;
                vec4 v = vec4(0.0f, vChange.y * tileSize.x, vChange.z * tileSize.y, vChange.y * tileSize.x + vChange.z * tileSize.y) + vChange.x;
                vec4 d = vec4(0.0f, dChange.y * tileSize.x, dChange.z * tileSize.y, dChange.y * tileSize.x + dChange.z * tileSize.y) + dChange.x;

                bool visible =
                    //all(notEqual(uChange.yz, vec2(0.0f))) &&
                    //all(notEqual(vChange.yz, vec2(0.0f))) &&
                    //all(notEqual(dChange.yz, vec2(0.0f))) &&
                    !(
                        all(lessThan(u, vec4(0.0f))) || all(greaterThan(u, vec4(1.0f))) ||
                        all(lessThan(v, vec4(0.0f))) || all(greaterThan(u + v, vec4(1.0f))) ||
                        all(lessThan(d, vec4(0.0f))) || all(greaterThan(d, vec4(1.0)))
                    );

                bool addTriangles = visible && det > 0.0f;

                //uint localIndex = subgroupInclusiveAdd(addTriangles ? 1 : 0);
                //uint addedTriangles = subgroupMax(localIndex);
                //localIndex -= 1;

                if(addTriangles)
                {

                    uint visibility = 0;
                    #if 1
                    float prevMinD = max(d.x, d.y);

                    u.zw = u.xy;
                    v.zw = v.xy;
                    d.zw = d.xy;

                    uint oldBits = uint(all(lessThan(u.xy, vec2(0.0f))) )       * 1u;
                    oldBits |= uint(all(lessThan(v.xy, vec2(0.0f))) )           * 2u;
                    oldBits |= uint(all(lessThan(d.xy, vec2(0.0f))) )           * 4u;
                    oldBits |= uint(all(greaterThan(u.xy, vec2(1.0f))) )        * 8u;
                    oldBits |= uint(all(greaterThan(u.xy + v.xy, vec2(1.0f))) ) * 16u;
                    oldBits |= uint(all(greaterThan(d.xy, vec2(1.0f))) )        * 32u;

                    for(uint i = 0; i < threads / THREAD_GROUP_SIZE; ++i)
                    {
                        float yChange = (THREAD_GROUP_SIZE / x_threads) * pixelsPerThreadY;
                        u.zw += vec2(uChange.z * yChange);
                        v.zw += vec2(vChange.z * yChange);
                        d.zw += vec2(dChange.z * yChange);

                        float localMinDepth = uintBitsToFloat(maxDepths[i]);

                        uint newBits = uint(all(lessThan(u.zw, vec2(0.0f))) )       * 1u;
                        newBits |= uint(all(lessThan(v.zw, vec2(0.0f))) )           * 2u;
                        newBits |= uint(all(lessThan(d.zw, vec2(0.0f))) )           * 4u;
                        newBits |= uint(all(greaterThan(u.zw, vec2(1.0f))) )        * 8u;
                        newBits |= uint(all(greaterThan(u.zw + v.zw, vec2(1.0f))) ) * 16u;
                        newBits |= uint(all(greaterThan(d.zw, vec2(1.0f))) )        * 32u;


                        bool newVisible = (oldBits & newBits) == 0;
                        uint visibilityBit = 1 << i;

                        float newMinD = max(d.z, d.w);
                        float minMinD = max(newMinD, prevMinD);
                        // Faster if not testing the uv hitting...
                        bool addVisibilityBit = newVisible && minMinD >= localMinDepth;
                        visibility |= addVisibilityBit ? visibilityBit : 0;

                        oldBits = newBits;

                        prevMinD = newMinD;
                    }
                    #endif
                    bool adding = visibility != 0;
                    if(adding)
                    {
                        uint area =
                            ((uint(minPos.x) & 255u) << 0u) |
                            ((uint(minPos.y) & 255u) << 8u) |
                            ((uint(maxPos.x) & 255u) << 16u) |
                            ((uint(maxPos.y) & 255u) << 24u);

                        uint localIndex = atomicAdd(visibleTriangles, 1);

                        #if USE_SHARED_VERTICES

                            localTriangle1.col = currTriangleIndex + 0;
                            localTriangle2.col = visibility;
                            localTriangle3.col = area;

                            localTriangle1.pos = uChange;
                            localTriangle2.pos = vChange;
                            localTriangle3.pos = dChange;

                            triangles[localIndex + 0 * threads] = localTriangle1;
                            triangles[localIndex + 1 * threads] = localTriangle2;
                            triangles[localIndex + 2 * threads] = localTriangle3;
                            //d0[(localIndex + 0) % (threads)] = dChange.x;
                            //d1[(localIndex + 0) % (threads)] = dChange.y;
                            //d2[(localIndex + 0) % (threads)] = dChange.z;
                        #else
                            triangleIndexes[localIndex + 0 * threads] =  currTriangleIndex + 0;
                            triangleIndexes[localIndex + 1 * threads] =  visibility;
                        #endif
                    }
                }
            }
        }
        groupMemoryBarrier();
        memoryBarrierShared();
        barrier();

#if 1
        uint addedTriangles = visibleTriangles;
        for(uint t = 0; t < addedTriangles; t += 1)
        {
            #if USE_SHARED_VERTICES
                VData localTriangle2 = triangles[t + 1 * threads];
                uint visibility = localTriangle2.col;
            #else
                uint visibility = triangleIndexes[t + 1 * threads];
            #endif
            //if((visibility & (1u << blockId)) != 0)
            {
                #if USE_SHARED_VERTICES
                    VData localTriangle1 = triangles[t + 0 * threads];
                    VData localTriangle3 = triangles[t + 2 * threads];
                    vec3 uChange = localTriangle1.pos;
                    vec3 vChange = localTriangle2.pos;
                    vec3 dChange = localTriangle3.pos;
                    //vec3 dChange = vec3(d0[(t + 0) % threads], d1[(t + 0) % threads], d2[(t + 0) % threads]);
                    uint currTriangleIndex = localTriangle1.col;
                #else
                    uint currTriangleIndex = triangleIndexes[t + 0 * threads];
                    VData localTriangle1 = vertexValues[currTriangleIndex + 0];
                    VData localTriangle2 = vertexValues[currTriangleIndex + 1];
                    VData localTriangle3 = vertexValues[currTriangleIndex + 2];

                    vec3 v1 = localTriangle1.pos;
                    vec3 v2 = localTriangle2.pos;
                    vec3 v3 = localTriangle3.pos;

                    vec3 uChange = vec3(0);
                    vec3 vChange = vec3(0);
                    vec3 dChange = vec3(0);
                    float det = 0.0f;
                    getUVD(v1, v2, v3, topLeft, screen, uChange, vChange, dChange, det);

                #endif





                float xOff = startIndex.x;
                for(uint j = 0; j < pixelsPerThreadY; ++j)
                {
                    float yOff = startIndex.y + j;

                    float u = dot(uChange, vec3(1.0f, xOff, yOff));
                    float v = dot(vChange, vec3(1.0f, xOff, yOff));
                    float d = dot(dChange, vec3(1.0f, xOff, yOff));

// intel doesnt like this... even with shared vertex 0
//                    float ds = d;
//                    uint newDepths = 0u;
//                    for(uint i = 0; i < pixelsPerThreadX; ++i)
//                    {
//                        uint index = i + j * pixelsPerThreadX;
//                        bvec4 b4 = bvec4(u >= 0.0f, u <= 1.0f, v >= 0.0f, u + v <= 1.0f);
//                        if(all(b4) && localMins[index] < ds)
//                            newDepths |= (1u << i);
//                        u += uChange.y;
//                        v += vChange.y;
//                        ds += dChange.y;
//                    }
                    //uint index = j * pixelsPerThreadX;
                    for(uint k = 0; k < 4; ++k)
                    {
                        vec4 dd = vec4(0);
                        uvec4 currents = uvec4(0);
                        if(k == 0) { dd = localMins1; currents = closestTriangleIndexes1; }
                        if(k == 1) { dd = localMins2; currents = closestTriangleIndexes2; }
                        if(k == 2) { dd = localMins3; currents = closestTriangleIndexes3; }
                        if(k == 3) { dd = localMins4; currents = closestTriangleIndexes4; }

                        for(uint i = 0; i < pixelsPerThreadX / 4; ++i)
                        {
                            if(u >= 0.0f && v >= 0.0f && u + v <= 1.0f)
                            {
                                if(i == 0 && d > dd.x)
                                {
                                    dd.x = d;
                                    currents.x = currTriangleIndex;
                                }
                                else if(i == 1 && d > dd.y)
                                {
                                    dd.y = d;
                                    currents.y = currTriangleIndex;
                                }
                                else if(i == 2 && d > dd.z)
                                {
                                    dd.z = d;
                                    currents.z = currTriangleIndex;
                                }
                                else if(i == 3 && d > dd.w)
                                {
                                    dd.w = d;
                                    currents.w = currTriangleIndex;
                                }
                                //if(d > localMins[i])
                                //{
                                //    localMins[i] = d;
                                //    closestTriangleIndexes[i] = currTriangleIndex;
                                //}
                            }
                            u += uChange.y;
                            v += vChange.y;
                            d += dChange.y;
                        }
                        if(k == 0) { localMins1 = dd; closestTriangleIndexes1 = currents; }
                        if(k == 1) { localMins2 = dd; closestTriangleIndexes2 = currents; }
                        if(k == 2) { localMins3 = dd; closestTriangleIndexes3 = currents; }
                        if(k == 3) { localMins4 = dd; closestTriangleIndexes4 = currents; }

                    }
                }
            }

        }
#endif
        groupMemoryBarrier();
        memoryBarrierShared();
        barrier();
    }
    for(uint j = 0; j < 4; ++j)
    {
        vec4 dd = vec4(0);
        uvec4 currents = uvec4(0);
        if(j == 0) { dd = localMins1; currents = closestTriangleIndexes1; }
        if(j == 1) { dd = localMins2; currents = closestTriangleIndexes2; }
        if(j == 2) { dd = localMins3; currents = closestTriangleIndexes3; }
        if(j == 3) { dd = localMins4; currents = closestTriangleIndexes4; }

        for(uint i = 0; i < pixelsPerThread / 4; ++i)
        {
            uint x = (i + j * 4) % pixelsPerThreadX;
            uint y = (i + j * 4) / pixelsPerThreadX;

            //float depth = localMins[i];
            //uint triangleIndex = closestTriangleIndexes[i];

            float depth = 0.0f;
            uint triangleIndex = 0;
            if(i == 0) { depth = dd.x; triangleIndex = currents.x; }
            if(i == 1) { depth = dd.y; triangleIndex = currents.y; }
            if(i == 2) { depth = dd.z; triangleIndex = currents.z; }
            if(i == 3) { depth = dd.w; triangleIndex = currents.w; }

            if(depth <= 1.0f && depth > 0.0f)
            {

                #if USE_PROJECTION

                    uint vertexAdding = 2u;

                    uint triangleIndex1 = indices[triangleIndex + 0];
                    uint triangleIndex2 = indices[triangleIndex + 1];
                    uint triangleIndex3 = indices[triangleIndex + 2];


                    VData closest1 = vertexValues[triangleIndex1 * vertexAdding];
                    VData closest2 = vertexValues[triangleIndex2 * vertexAdding];
                    VData closest3 = vertexValues[triangleIndex3 * vertexAdding];

                    vec4 pos0 =  mvp * (matrix_padding * vec4(closest1.pos, 1.0f));
                    vec4 pos1 =  mvp * (matrix_padding * vec4(closest2.pos, 1.0f));
                    vec4 pos2 =  mvp * (matrix_padding * vec4(closest3.pos, 1.0f));

                    pos0.w = 1.0f / pos0.w;
                    pos1.w = 1.0f / pos1.w;
                    pos2.w = 1.0f / pos2.w;

                    pos0.xyz *= pos0.w;
                    pos1.xyz *= pos1.w;
                    pos2.xyz *= pos2.w;

                    vec3 v1 = pos0.xyz;
                    vec3 v2 = pos1.xyz;
                    vec3 v3 = pos2.xyz;



                #else
                    VData closest1 = vertexValues[triangleIndex + 0];
                    VData closest2 = vertexValues[triangleIndex + 1];
                    VData closest3 = vertexValues[triangleIndex + 2];

                    vec3 v1 = closest1.pos;
                    vec3 v2 = closest2.pos;
                    vec3 v3 = closest3.pos;
                #endif

                uvec4 c1 = uvec4((closest1.col & 255u), (closest1.col >> 8u) & 255u, (closest1.col >> 16u) & 255u, (closest1.col >> 24u) & 255u);
                uvec4 c2 = uvec4((closest2.col & 255u), (closest2.col >> 8u) & 255u, (closest2.col >> 16u) & 255u, (closest2.col >> 24u) & 255u);
                uvec4 c3 = uvec4((closest3.col & 255u), (closest3.col >> 8u) & 255u, (closest3.col >> 16u) & 255u, (closest3.col >> 24u) & 255u);
                vec4 cc1 = c1 / 255.0f;
                vec4 cc2 = c2 / 255.0f;
                vec4 cc3 = c3 / 255.0f;



                vec3 uChange = vec3(0);
                vec3 vChange = vec3(0);
                vec3 dChange = vec3(0);
                float det = 0.0f;
                getUVD(v1, v2, v3, topLeft, screen, uChange, vChange, dChange, det);

                vec3 dotXY = vec3(1.0f, float(threadId % x_threads) * pixelsPerThreadX + x,
                    float(threadId / x_threads) * pixelsPerThreadY + y);

                float u = dot(uChange, dotXY);
                float v = dot(vChange, dotXY);

                vec3 closestWVU = vec3(1.0f - u - v, u, v);


                vec4 color = vec4(1.0f);
                color =  cc1 * closestWVU.x + cc2 * closestWVU.y + cc3 * closestWVU.z;
                // Visualize depth
                //color.rgb = vec3(depth * depth);
                //color.rgb = vec3(depth);
                //color.r = triangleIndex & 255u;
                color.a = 1.0f;
                if(all(lessThanEqual(pixelCoords + ivec2(x, y), screen)))
                {
                    imageStore(outputImage, ivec2(pixelCoords) + ivec2(x, y), color);
                }
            }
        }
    }
}



